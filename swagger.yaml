openapi: 3.0.3
info:
  title: Swagger Vet Clinic - OpenAPI 3.0
  description: |-
    This is a REST API performs CRUD operations with tutors and pets.
  contact:
    email: italo.maia.pb@compasso.com.br
  version: 1.0.0
externalDocs:
  description: Find out more about this API
  url: https://github.com/italomaia03/compass-challenge-week4
servers:
  - url: http://localhost:{port}/api/v1
    variables:
      port:
        default: "3000"
        description: Put the port of your choice in the designated camp.
tags:
  - name: Authentication
    description: Get JWT token
  - name: Tutors
    description: Everything about tutors
  - name: Pets
    description: Everything about pets
paths:
  /auth:
    post:
      tags:
        - Authentication
      summary: Log in and get a JWT Token
      operationId: login
      requestBody:
        description: Provide valid email and password.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Login"
        required: true
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
        "401":
          description: Unauthorized

  /tutor/{id}:
    put:
      security:
        - bearerAuth: []
      tags:
        - Tutors
      summary: Update an existing tutor
      description: Update an existing tutor by Id
      operationId: updateTutor
      requestBody:
        description: Update an existent tutor in the database
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Tutor"
        required: true
      responses:
        "200":
          description: Successful operation
        "400":
          description: Bad Request
        "404":
          description: Content not found
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
    parameters:
      - name: id
        in: path
        description: id of tutor to use
        required: true
        schema:
          type: string
        style: simple

    delete:
      security:
        - bearerAuth: []
      tags:
        - Tutors
      summary: Delete an existing tutor
      description: Delete an existing tutor by Id
      operationId: deleteTutor
      parameters:
        - name: id
          in: path
          description: ID of tutor to use
          required: true
          schema:
            type: string
          style: simple
      responses:
        "200":
          description: Successful operation
        "204":
          description: No Content
        "400":
          description: Bad Request
        "404":
          description: Content not found
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
  /tutor:
    post:
      tags:
        - Tutors
      summary: Add a new tutor to the database
      description: Add a new tutor to the database
      operationId: createTutor
      requestBody:
        description: Create a new tutor in the database
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Tutor"
        required: true
      responses:
        "200":
          description: Successful operation
        "400":
          description: Bad Request
        "404":
          description: Content not found
        "403":
          description: Forbidden
  /tutors:
    get:
      security:
        - bearerAuth: []
      tags:
        - Tutors
      summary: Lists all tutors
      description: List all tutors in the database
      operationId: getTutors
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/TutorComplete"
        "404":
          description: Content not found
        "401":
          description: Unauthorized

  /pet/{tutorId}:
    post:
      security:
        - bearerAuth: []
      tags:
        - Pets
      summary: Creates a new pet
      description: Creates a pet in the database and assigns it to a tutor
      operationId: createPet
      requestBody:
        description: Create a new tutor in the database
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Pet"
        required: true
      parameters:
        - name: tutorId
          in: path
          description: ID of tutor that receiver the pet
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful operation
        "400":
          description: Bad Request
        "404":
          description: Content not found
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
  /pet/{petId}/tutor/{tutorId}:
    put:
      security:
        - bearerAuth: []
      tags:
        - Pets
      summary: Update an existing pet
      description: Update an existing pet by Id
      operationId: updatePet
      requestBody:
        description: Update an existent pet assigned to designated tutor
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Pet"
        required: true
      responses:
        "200":
          description: Successful operation
        "400":
          description: Bad Request
        "404":
          description: Content not found
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
    parameters:
      - name: petId
        in: path
        description: id of pet to use
        required: true
        schema:
          type: string
        style: simple

      - name: tutorId
        in: path
        description: id of tutor to use
        required: true
        schema:
          type: string
        style: simple

    delete:
      security:
        - bearerAuth: []
      tags:
        - Pets
      summary: Deletes a pet
      description: Delete an existing pet
      operationId: deletePet
      parameters:
        - name: petId
          in: path
          description: Pet id to delete pet
          required: true
          schema:
            type: string
        - name: tutorId
          in: path
          description: Tutor id to delete
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful operation
        "204":
          description: No Content.
        "400":
          description: Bad request
        "404":
          description: Content not found
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
components:
  schemas:
    Pet:
      type: object
      properties:
        name:
          type: string
          example: Tobias
        species:
          type: string
          example: Dog
        carry:
          type: string
          example: p
          enum:
            - "p"
            - "m"
            - "g"
        weight:
          type: integer
          format: int32
          example: 25
        date_of_birth:
          type: string
          example: 2000-10-10 10:10
    PetComplete:
      type: object
      properties:
        _id:
          type: string
          example: bffc5560-2eaa-4cf9-8019-94c5b509e7b2
        name:
          type: string
          example: Tobias
        species:
          type: string
          example: Dog
        carry:
          type: string
          example: p
          enum:
            - "p"
            - "m"
            - "g"
        weight:
          type: integer
          format: int32
          example: 25
        date_of_birth:
          type: string
          example: 2000-10-10 10:10
    Tutor:
      type: object
      properties:
        name:
          type: string
          example: Jon
        phone:
          type: string
          example: 88997531235
        email:
          type: string
          example: test@test.com
        password:
          type: string
          example: abcd1234
        date_of_birth:
          type: string
          example: 2000-10-10 10:10
        zip_code:
          type: string
          example: 63587111

    TutorComplete:
      type: object
      properties:
        _id:
          type: string
          example: bffc5560-2eaa-4cf9-8019-94c5b509e7b2
        name:
          type: string
          example: Jon
        password:
          type: string
          example: abcd1234
        phone:
          type: string
          example: 88997531235
        email:
          type: string
          example: test@test.com
        date_of_birth:
          type: string
          example: 2000-10-10 10:10
        zip_code:
          type: string
          example: 63587111
        pets:
          type: array
          items:
            $ref: "#/components/schemas/PetComplete"
    Login:
      type: object
      properties:
        email:
          type: string
          example: test@test.com
        password:
          type: string
          example: abcd1234
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: jwt
  requestBodies:
    Tutor:
      description: Tutor object that needs to be created/updated
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Tutor"
    Pet:
      description: Pet object that needs to be created/updated
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Pet"
